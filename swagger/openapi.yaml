openapi: 3.0.0
info:
  version: 1.0.0
  title: User API
  description: Example Java Spring Microservice with OpenAPI and MongoDB

servers:
  - url: http://localhost:8080/

paths:
  /users:
    get:
      description: Returns a list of users
      operationId: findUser
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: surname
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'

    post:
      description: Create a new User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'

  /users/{email}:
    get:
      description: Get User by key (email)
      operationId: getUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Successfully returned an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: Not found User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
    put:
      description: Update User
      operationId: updateUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'

      responses:
        '200':
          description: Successfully updated an user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: Not found User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
    delete:
      description: Delete User by Key
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Successfully deleted an user

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
        '404':
          description: Not found User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'

  /etl/import-csv:
    post:
      description: ETL Import Users by CSV file, example CSV line name#surname#email#address
      operationId: importCSVUsers
      requestBody:
        content:
          application/csv:
            schema:
              type: string
              format: base64
      responses:
        '201':
          description: Successfully imported CSV Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserError'
components:
  schemas:
    UserDTO:
      type: object
      required:
        - name
        - surname
        - email
        - address
      properties:
        name:
          type: string
          minLength: 1
        surname:
          type: string
          minLength: 1
        email:
          type: string
          format: email
          minLength: 1
        address:
          type: string
          minLength: 1
    UserError:
      type: object
      required:
        - message
      properties:
        message:
          type: string